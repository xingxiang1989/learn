apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.some.jiaguplugin'
apply plugin: 'com.some.custom_plugin'
apply plugin: 'com.tencent.tinker.patch'

jiagu{
    userName '15267436589'
    userPwd '123456abcd'
    keyStorePass '123456abc'
    keyStoreKeyAliasPwd '123456abc'
    keyStoreKeyAlias 'MvvmDemo'
    keyStorePath '/Users/xiangxing/AndroidProjects2/MvvmDemo/release.keystore'
    jiaguToolPath '/Users/xiangxing/Downloads/360jiagubao_mac/jiagu/jiagu.jar'
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.some.mvvmdemo"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            // 显式声明支持注解
            annotationProcessorOptions {
                includeCompileClasspath true
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }

    kotlinOptions{
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation "android.arch.lifecycle:extensions:2.0.0"
    implementation project(path: ':common')
    implementation project(path: ':aoplib')
    if(!isModule.toBoolean()){
        implementation project(path: ':modulea')
    }

    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'


    //  retrofit的依赖
    implementation 'com.squareup.retrofit2:retrofit:2.8.1'
    //将JSON字符串转换为对象需要使用的依赖
    implementation 'com.squareup.retrofit2:converter-gson:2.8.1'
    implementation "androidx.core:core-ktx:+"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.0.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.blankj:utilcodex:1.23.7"
    implementation 'io.reactivex.rxjava2:rxjava:2.2.8'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'

    implementation "org.aspectj:aspectjrt:1.9.6"

    implementation project(path: ':demo_annotation')
    annotationProcessor project(':demo-compiler')
    implementation project(path: ':hookactivity')
    implementation project(path: ':flexlayout')


    //optional, help to generate the final application
    compileOnly "com.tencent.tinker:tinker-android-anno:$tinker_version"
    //tinker's main Android lib
    implementation "com.tencent.tinker:tinker-android-lib:$tinker_version"


}
repositories {
    mavenCentral()
}

import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main
android.applicationVariants.all { variant ->
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        System.out.println("appmodule 执行Aspectj 编译器")
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         //aspectj 处理的源文件
                         "-inpath", javaCompile.destinationDir.toString(),
                         //aspectj 编译器的classpath aspectjtools
                         "-aspectpath", javaCompile.classpath.asPath,
                         //输出目录，aspectj处理完成后的输出目录
                         "-d", javaCompile.destinationDir.toString(),
                         //java 的类查找路径
                         "-classpath", javaCompile.classpath.asPath,
                         //覆盖引导类的位置
                         "-bootclasspath", project.android.bootClasspath.join(
                File.pathSeparator)]

        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break
            }
        }
    }
}

